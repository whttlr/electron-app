// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Plugin model - stores installed plugins
model Plugin {
  id              String   @id @default(uuid())
  pluginId        String   @unique // Plugin's internal ID
  name            String
  version         String
  description     String?
  type            String   // utility, visualization, control, productivity
  source          String   // local, marketplace, registry
  status          String   // active, inactive
  
  // Installation metadata
  installedAt     DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastCheckedAt   DateTime?
  updateAvailable Boolean  @default(false)
  latestVersion   String?
  
  // Registry info
  registryId      String?
  publisherId     String?
  checksum        String?
  
  // Relations
  state           PluginState?
  dependencies    PluginDependency[] @relation("Plugin")
  dependents      PluginDependency[] @relation("Dependency")
  
  @@index([pluginId])
  @@index([status])
}

// Plugin state - stores custom settings and enabled/disabled state
model PluginState {
  id              String   @id @default(uuid())
  pluginId        String   @unique
  plugin          Plugin   @relation(fields: [pluginId], references: [pluginId], onDelete: Cascade)
  
  // State
  enabled         Boolean  @default(true)
  
  // Configuration
  placement       String?  // dashboard, standalone, modal, sidebar
  screen          String?  // main, new, controls, settings
  width           String?  // number or 'auto'
  height          String?  // number or 'auto'
  priority        Int      @default(100)
  autoStart       Boolean  @default(false)
  permissions     String?  // JSON array of permissions
  
  // Standalone specific
  menuTitle       String?
  menuIcon        String?
  routePath       String?
  
  // Custom settings (JSON)
  customSettings  String?  // JSON string for plugin-specific settings
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([enabled])
}

// Plugin dependencies
model PluginDependency {
  id              String   @id @default(uuid())
  pluginId        String
  plugin          Plugin   @relation("Plugin", fields: [pluginId], references: [pluginId], onDelete: Cascade)
  
  dependencyId    String
  dependency      Plugin   @relation("Dependency", fields: [dependencyId], references: [pluginId], onDelete: Cascade)
  
  versionRange    String   // e.g., "^1.0.0", ">=2.0.0"
  
  @@unique([pluginId, dependencyId])
  @@index([pluginId])
  @@index([dependencyId])
}

// Command history - stores executed commands for audit and replay
model CommandHistory {
  id              String   @id @default(uuid())
  command         String   // The command executed
  type            String   // gcode, jog, macro, system
  
  // Context
  source          String   // user, plugin, system, macro
  pluginId        String?  // If command came from a plugin
  
  // Execution details
  executedAt      DateTime @default(now())
  duration        Int?     // Milliseconds
  status          String   // success, error, cancelled
  error           String?  // Error message if failed
  
  // Machine state at time of command
  positionBefore  String?  // JSON: {x, y, z}
  positionAfter   String?  // JSON: {x, y, z}
  feedRate        Float?
  spindleSpeed    Float?
  
  // Response
  response        String?  // Machine response
  
  @@index([executedAt])
  @@index([type])
  @@index([status])
  @@index([pluginId])
}

// Application state - stores current application state
model AppState {
  id              String   @id @default("singleton")
  
  // Machine state
  machineConnected Boolean @default(false)
  machineUnits    String   @default("metric") // metric, imperial
  currentPosition String?  // JSON: {x, y, z}
  workOffset      String?  // JSON: {x, y, z}
  
  // UI state
  theme           String   @default("light")
  language        String   @default("en")
  
  // Session
  lastConnectedAt DateTime?
  sessionStartedAt DateTime @default(now())
  
  updatedAt       DateTime @updatedAt
}

// Settings history - track configuration changes
model SettingHistory {
  id              String   @id @default(uuid())
  key             String   // Setting key/path
  oldValue        String?  // JSON string
  newValue        String   // JSON string
  changedBy       String   // user, system, plugin
  pluginId        String?  // If changed by plugin
  
  changedAt       DateTime @default(now())
  
  @@index([key])
  @@index([changedAt])
}