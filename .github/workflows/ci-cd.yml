# CI/CD Pipeline for CNC Control Application
# Automated testing, building, and deployment workflow

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/**']
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

# Global environment variables
env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  REGISTRY_URL: 'ghcr.io'
  IMAGE_NAME: 'cnc-control'

# Workflow permissions
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run dependency audit
        run: pnpm audit --audit-level high
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
        
      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm run lint --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
        continue-on-error: true
        
      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true
          
      - name: Run Prettier check
        run: pnpm run format:check
        
      - name: Type checking
        run: pnpm run type-check
        
      - name: Run SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm run test:unit --coverage
        env:
          CI: true
          
      - name: Run integration tests
        run: pnpm run test:integration
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # E2E tests with multiple browsers
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        device: [desktop, mobile, tablet]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install ${{ matrix.browser }}
        
      - name: Build application
        run: pnpm run build:staging
        env:
          VITE_API_URL: http://localhost:3000
          VITE_WS_URL: ws://localhost:3001
          
      - name: Start preview server
        run: pnpm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:4173
        
      - name: Run E2E tests
        run: pnpm run test:e2e:${{ matrix.browser }}:${{ matrix.device }}
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.device }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Visual regression testing
  visual-test:
    name: Visual Regression
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm run build:staging
        
      - name: Run visual regression tests
        run: pnpm run test:visual
        env:
          CI: true
          
      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-diff-report
          path: visual-regression-report/
          retention-days: 7

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm run build:production
        
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Bundle size analysis
        run: pnpm run analyze:bundle
        
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: bundle-analysis/
          retention-days: 30

  # Build and containerize
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=CNC Control Application
            org.opencontainers.image.description=Industrial CNC control interface
            org.opencontainers.image.vendor=CNC Control Team
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_APP_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

  # Security scanning of container images
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: sarif
          output: trivy-results.sarif
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          
      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ needs.build.outputs.image-tag }}
          args: --severity-threshold=high

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.cnc-control.com
      
    steps:
      - name: Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: deployment/
          
      - name: Deploy to staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: cnc-control-staging
          publish-profile: ${{ secrets.STAGING_PUBLISH_PROFILE }}
          images: ${{ needs.build.outputs.image-tag }}
          
      - name: Run post-deployment tests
        run: |
          curl -f https://staging.cnc-control.com/health || exit 1
          curl -f https://staging.cnc-control.com/manifest.json || exit 1
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Staging deployment ${{ job.status }}: ${{ github.event.head_commit.message }}'

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test, container-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://cnc-control.com
      
    steps:
      - name: Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: deployment/
          
      - name: Deploy to production
        uses: azure/webapps-deploy@v2
        with:
          app-name: cnc-control-production
          publish-profile: ${{ secrets.PRODUCTION_PUBLISH_PROFILE }}
          images: ${{ needs.build.outputs.image-tag }}
          
      - name: Run production health checks
        run: |
          curl -f https://cnc-control.com/health || exit 1
          curl -f https://cnc-control.com/manifest.json || exit 1
          
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Docker Image
            `${{ needs.build.outputs.image-tag }}`
            
            ## Verification
            Image digest: `${{ needs.build.outputs.image-digest }}`
          draft: false
          prerelease: false
          
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Production deployment ${{ job.status }}: ${{ github.event.head_commit.message }}'

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
      
    steps:
      - name: Rollback to previous version
        uses: azure/webapps-deploy@v2
        with:
          app-name: cnc-control-production
          publish-profile: ${{ secrets.PRODUCTION_PUBLISH_PROFILE }}
          images: ${{ github.event.inputs.rollback_tag }}
          
      - name: Verify rollback
        run: |
          curl -f https://cnc-control.com/health || exit 1
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Production rollback completed to ${{ github.event.inputs.rollback_tag }}'

  # Cleanup old artifacts and images
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10
          
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true