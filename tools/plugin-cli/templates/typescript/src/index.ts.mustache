import { Plugin, PluginContext } from '@cnc-jog-controls/plugin-api'
import { MainPanel } from './components/MainPanel'
import { SettingsDialog } from './components/SettingsDialog'
import { DataService } from './services/DataService'
import { StorageService } from './services/StorageService'
import manifest from './manifest.json'
import './styles/globals.css'

/**
 * {{displayName}} Plugin
 * {{description}}
 * 
 * @author {{author.name}} <{{author.email}}>
 * @version {{version}}
 */
export default class {{#camelCase}}{{pluginName}}{{/camelCase}}Plugin extends Plugin {
  private dataService: DataService
  private storageService: StorageService
  private context: PluginContext | null = null

  constructor() {
    super()
    this.dataService = new DataService()
    this.storageService = new StorageService()
  }

  /**
   * Plugin activation - called when the plugin is loaded and activated
   */
  async onActivate(context: PluginContext): Promise<void> {
    this.context = context
    
    try {
      // Initialize services
      await this.initializeServices(context)
      
      // Register UI components
      this.registerUIComponents(context)
      
      // Set up event listeners
      this.setupEventListeners(context)
      
      // Load plugin configuration
      await this.loadConfiguration(context)
      
      // Perform initial data load
      await this.loadInitialData(context)
      
      console.log(`${manifest.name} v${manifest.version} activated successfully`)
      
      // Notify user of successful activation
      context.ui.showNotification({
        type: 'success',
        title: '{{displayName}} Activated',
        message: 'Plugin loaded successfully and ready to use',
        duration: 3000
      })

    } catch (error) {
      console.error(`Failed to activate ${manifest.name}:`, error)
      
      context.ui.showNotification({
        type: 'error',
        title: 'Plugin Activation Failed',
        message: `Failed to activate {{displayName}}: ${error.message}`,
        duration: 5000
      })
      
      throw error
    }
  }

  /**
   * Plugin deactivation - called when the plugin is being unloaded
   */
  async onDeactivate(context: PluginContext): Promise<void> {
    try {
      // Save current state
      await this.saveState(context)
      
      // Clean up resources
      await this.cleanupResources()
      
      // Unregister components
      this.unregisterComponents(context)
      
      // Remove event listeners
      this.removeEventListeners(context)
      
      console.log(`${manifest.name} deactivated successfully`)

    } catch (error) {
      console.error(`Error during plugin deactivation:`, error)
      throw error
    }
  }

  /**
   * Configuration update handler
   */
  async onConfigurationUpdate(config: any, context: PluginContext): Promise<void> {
    try {
      // Update services with new configuration
      await this.dataService.updateConfiguration(config)
      await this.storageService.updateConfiguration(config)
      
      // Refresh UI if needed
      this.refreshUI(context)
      
      console.log('Plugin configuration updated successfully')

    } catch (error) {
      console.error('Failed to update plugin configuration:', error)
      throw error
    }
  }

  /**
   * Error handler
   */
  async onError(error: Error, context: PluginContext): Promise<void> {
    console.error(`Plugin error in ${manifest.name}:`, error)
    
    // Log error for debugging
    context.logger.error('Plugin Error', {
      plugin: manifest.name,
      version: manifest.version,
      error: error.message,
      stack: error.stack
    })
    
    // Show user-friendly error message
    context.ui.showNotification({
      type: 'error',
      title: 'Plugin Error',
      message: `An error occurred in {{displayName}}. Please check the logs for details.`,
      duration: 5000
    })
  }

  /**
   * Initialize plugin services
   */
  private async initializeServices(context: PluginContext): Promise<void> {
    await this.dataService.initialize(context)
    await this.storageService.initialize(context)
  }

  /**
   * Register UI components
   */
  private registerUIComponents(context: PluginContext): void {
    // Register main panel
    context.ui.registerPanel({
      id: '{{pluginName}}-main-panel',
      title: '{{displayName}}',
      icon: 'plugin-icon',
      component: MainPanel,
      position: 'sidebar',
      defaultSize: { width: 320, height: 400 },
      resizable: true,
      closable: true
    })

    // Register settings dialog
    context.ui.registerDialog({
      id: '{{pluginName}}-settings',
      title: '{{displayName}} Settings',
      component: SettingsDialog,
      modal: true,
      size: { width: 600, height: 500 }
    })

    // Register menu items
    context.ui.registerMenuItem({
      id: '{{pluginName}}-menu',
      label: '{{displayName}}',
      parent: 'plugins',
      submenu: [
        {
          id: '{{pluginName}}-show-panel',
          label: 'Show Panel',
          action: () => context.ui.showPanel('{{pluginName}}-main-panel')
        },
        {
          id: '{{pluginName}}-settings',
          label: 'Settings',
          action: () => context.ui.showDialog('{{pluginName}}-settings')
        },
        { type: 'separator' },
        {
          id: '{{pluginName}}-about',
          label: 'About',
          action: () => this.showAboutDialog(context)
        }
      ]
    })

    // Register toolbar button (optional)
    context.ui.registerToolbarButton({
      id: '{{pluginName}}-toolbar',
      label: '{{displayName}}',
      icon: 'plugin-icon',
      tooltip: '{{description}}',
      action: () => context.ui.togglePanel('{{pluginName}}-main-panel')
    })
  }

  /**
   * Set up event listeners
   */
  private setupEventListeners(context: PluginContext): void {
    // Listen to machine events
    context.machine.on('statusChange', this.onMachineStatusChange.bind(this))
    context.machine.on('connectionChange', this.onConnectionChange.bind(this))
    context.machine.on('positionChange', this.onPositionChange.bind(this))

    // Listen to file events
    context.files.on('fileLoaded', this.onFileLoaded.bind(this))
    context.files.on('fileSaved', this.onFileSaved.bind(this))

    // Listen to application events
    context.events.on('application:ready', this.onApplicationReady.bind(this))
    context.events.on('application:shutdown', this.onApplicationShutdown.bind(this))

    // Listen to custom plugin events
    context.events.on('{{pluginName}}:refresh', this.onRefreshRequested.bind(this))
  }

  /**
   * Remove event listeners
   */
  private removeEventListeners(context: PluginContext): void {
    context.machine.off('statusChange', this.onMachineStatusChange)
    context.machine.off('connectionChange', this.onConnectionChange)
    context.machine.off('positionChange', this.onPositionChange)
    context.files.off('fileLoaded', this.onFileLoaded)
    context.files.off('fileSaved', this.onFileSaved)
    context.events.off('application:ready', this.onApplicationReady)
    context.events.off('application:shutdown', this.onApplicationShutdown)
    context.events.off('{{pluginName}}:refresh', this.onRefreshRequested)
  }

  /**
   * Load plugin configuration
   */
  private async loadConfiguration(context: PluginContext): Promise<void> {
    const config = await context.config.getSection('{{pluginName}}')
    
    if (!config) {
      // Set default configuration
      await context.config.setSection('{{pluginName}}', {
        enabled: true,
        autoStart: false,
        refreshInterval: 1000,
        showNotifications: true
      })
    }
  }

  /**
   * Load initial data
   */
  private async loadInitialData(context: PluginContext): Promise<void> {
    try {
      // Load any initial data needed by the plugin
      await this.dataService.loadInitialData()
      
      // Emit event to notify components
      context.events.emit('{{pluginName}}:dataLoaded', {
        timestamp: new Date(),
        plugin: manifest.name
      })

    } catch (error) {
      console.warn('Failed to load initial data:', error.message)
    }
  }

  /**
   * Save current state
   */
  private async saveState(context: PluginContext): Promise<void> {
    try {
      const state = {
        lastActive: new Date().toISOString(),
        dataState: await this.dataService.getState(),
        uiState: this.getUIState(context)
      }
      
      await this.storageService.saveState(state)

    } catch (error) {
      console.warn('Failed to save plugin state:', error.message)
    }
  }

  /**
   * Clean up resources
   */
  private async cleanupResources(): Promise<void> {
    await this.dataService.cleanup()
    await this.storageService.cleanup()
  }

  /**
   * Unregister UI components
   */
  private unregisterComponents(context: PluginContext): void {
    context.ui.unregisterPanel('{{pluginName}}-main-panel')
    context.ui.unregisterDialog('{{pluginName}}-settings')
    context.ui.unregisterMenuItem('{{pluginName}}-menu')
    context.ui.unregisterToolbarButton('{{pluginName}}-toolbar')
  }

  /**
   * Refresh UI components
   */
  private refreshUI(context: PluginContext): void {
    // Emit refresh event to components
    context.events.emit('{{pluginName}}:refresh', {
      timestamp: new Date()
    })
  }

  /**
   * Get current UI state
   */
  private getUIState(context: PluginContext): any {
    return {
      panelVisible: context.ui.isPanelVisible('{{pluginName}}-main-panel'),
      panelSize: context.ui.getPanelSize('{{pluginName}}-main-panel')
    }
  }

  /**
   * Show about dialog
   */
  private showAboutDialog(context: PluginContext): void {
    context.ui.showDialog('about', {
      title: 'About {{displayName}}',
      content: `
        <h3>{{displayName}}</h3>
        <p><strong>Version:</strong> ${manifest.version}</p>
        <p><strong>Description:</strong> {{description}}</p>
        <p><strong>Author:</strong> {{author.name}}</p>
        <p><strong>License:</strong> {{license}}</p>
        {{#repository}}
        <p><strong>Repository:</strong> <a href="{{repository}}" target="_blank">{{repository}}</a></p>
        {{/repository}}
      `,
      size: { width: 400, height: 300 }
    })
  }

  // Event Handlers

  private onMachineStatusChange(status: any): void {
    this.dataService.updateMachineStatus(status)
  }

  private onConnectionChange(connected: boolean): void {
    this.dataService.updateConnectionStatus(connected)
  }

  private onPositionChange(position: any): void {
    this.dataService.updatePosition(position)
  }

  private onFileLoaded(file: any): void {
    this.dataService.processFileData(file)
  }

  private onFileSaved(file: any): void {
    // Handle file save event
  }

  private onApplicationReady(): void {
    // Handle application ready event
  }

  private onApplicationShutdown(): void {
    // Handle application shutdown event
  }

  private onRefreshRequested(): void {
    // Handle refresh request
    if (this.context) {
      this.loadInitialData(this.context)
    }
  }
}