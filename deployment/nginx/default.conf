# Default server configuration for CNC Control Application
# Handles static file serving, PWA requirements, and API proxying

# Upstream for API (if proxying to backend)
upstream api_backend {
    server api:3000;
    keepalive 32;
}

# Upstream for WebSocket (if proxying)
upstream ws_backend {
    server api:3001;
    keepalive 32;
}

# Main server block
server {
    listen 8080 default_server;
    listen [::]:8080 default_server;
    
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # PWA manifest
    location = /manifest.json {
        add_header Cache-Control "public, max-age=604800"; # 1 week
        add_header Service-Worker-Allowed "/";
        try_files $uri =404;
    }
    
    # Service Worker
    location = /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        add_header Service-Worker-Allowed "/";
        try_files $uri =404;
    }
    
    # Offline fallback page
    location = /offline.html {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        internal;
    }
    
    # Static assets with versioning (contenthash)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache versioned assets for 1 year
        add_header Cache-Control "public, max-age=31536000, immutable";
        
        # CORS headers for fonts and assets
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        try_files $uri =404;
    }
    
    # API proxy (if backend is separate)
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Proxy timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Proxy buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Health check
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        
        proxy_pass http://api_backend/;
    }
    
    # WebSocket proxy
    location /ws/ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
        proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
        proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
        
        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        proxy_pass http://ws_backend/;
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","version":"$upstream_http_x_version"}';
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Cache-Control "public, max-age=86400"; # 1 day
        try_files $uri @robots;
    }
    
    location @robots {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\n";
    }
    
    # Security.txt
    location = /.well-known/security.txt {
        add_header Content-Type text/plain;
        return 200 "Contact: security@cnc-control.com\nExpires: 2025-12-31T23:59:59.000Z\nPreferred-Languages: en\n";
    }
    
    # Block access to sensitive files
    location ~* \.(env|log|htaccess|htpasswd|ini|conf|yml|yaml|json)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to backup files
    location ~* ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Rate limiting for static files
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        limit_req zone=static burst=50 nodelay;
        try_files $uri =404;
    }
    
    # SPA fallback - serve index.html for all unmatched routes
    location / {
        # Rate limiting for HTML requests
        limit_req zone=static burst=10 nodelay;
        
        # PWA headers
        add_header Service-Worker-Allowed "/";
        
        # Cache control for HTML (no cache for navigation)
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        try_files $uri $uri/ @fallback;
    }
    
    # Fallback for SPA routing
    location @fallback {
        # Check if user is online by testing for specific headers
        # If offline, serve offline.html instead
        if ($http_user_agent ~* "Offline|offline") {
            rewrite ^.*$ /offline.html last;
        }
        
        rewrite ^.*$ /index.html last;
    }
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# HTTPS server (if SSL certificates are provided)
server {
    listen 8443 ssl http2;
    listen [::]:8443 ssl http2;
    
    server_name _;
    
    # SSL configuration
    include /etc/nginx/conf.d/ssl.conf;
    
    # HSTS header
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Include all location blocks from HTTP server
    include /etc/nginx/conf.d/locations.conf;
}